// C++ code
//
#include <Servo.h>

// Setting up pins
const int enablePin1 = A1;
const int enablePin2 = A3;
const int inputPin1A = 3;
const int inputPin2A = 4;
const int inputPin3A = 5;
const int inputPin4A = 6;
const int echoPin = 9; 
const int trigPin = 10;

Servo servo_12;

// setting up global variables
float distance;
int currentA = 90;
int unit = 190/6;
int corMem; // how much it corrected by
int clearRight = 0;

void setup()
{
   //Set up for the motors
  pinMode (enablePin1, OUTPUT);
  pinMode (enablePin2, OUTPUT);
  pinMode (inputPin1A, OUTPUT); 
  pinMode (inputPin2A, OUTPUT);
  pinMode (inputPin3A, OUTPUT);
  pinMode (inputPin4A, OUTPUT);
  digitalWrite (enablePin1, LOW);
  digitalWrite (enablePin2, LOW);
  digitalWrite (inputPin1A, LOW);
  digitalWrite (inputPin2A, LOW);
  digitalWrite (inputPin3A, LOW);
  digitalWrite (inputPin4A, LOW);
  //Set up for the Sonar
  Serial.begin(9600);
  
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  
  //Set up for the servo
  servo_12.attach(12, 500, 2500); //works as (pin, Min, Max), Min refers to power for angle 0, Max refers to power for angle 180
  servo_12.write(90);
  delay(3000); // this is to make sure the servo is in place before the rover begins
  
  //Turn on the rover
  digitalWrite (enablePin1, HIGH);
  digitalWrite (enablePin2, HIGH);
}

void loop() {
  // Please check below "void loop" to get an explanation of all the functions
  // Setting up variables that need to be reset each loop
  bool seeForWall = 0;
  int creepDist = 0;
  int turnQ = 0;
  distance = check(180); //check right
  if (distance > 190){ // if distance is greater than 90 say right is clear
    if (clearRight == 1){
      turnQ = 90; // if right was clear the one directly preceeding tell the program to turn right later
                  // this is because the black bars along the side don't give a reading and make it want to turn right
                  // so this was done to avoid that
    }
    clearRight = 1; // if it is clear but not previously, say it is currently clear
  }
  else{ // if it is not clear the program will try to center the rover in the maze
    clearRight = 0;
    corMem = (distance-80)/2;
    if (corMem > 8){
      corMem = 8;
    }
    else if (corMem < -8){
      corMem = -8;
    }
    turnQ = corMem;
  }
  distance = check(135); // if it sees a 45 degree wall tell the program to avoid it by turning left 45 degrees
  if (distance <= 80){
    turnQ = -45;
  }
  distance = check(90);
  if (distance < 190 && turnQ != -45){ // if there is a wall in front tell the program to execute that program if it hasn't already seen a 45 degree wall
    turnQ = 0;
    seeForWall = 1;
    creepDist = distance - 80; // how much it needs to move to get 80 mm from the wall starting from the center
  }
  if (seeForWall){
    go(creepDist); // move up to wall
      if (check(180) > 190){ // if the right is clear turn right, otherwise turn left
        move(90,95); 
      }
      else{
        turn(-90);
      }
    
  }
  else{
    int movUnit = unit; // move by a globally set distance
    if (turnQ == 90){ // if it was previously told that it was clear to turn right through a hole, turn right through that hole;
      movUnit = 95; // set the move to half a maze tile
      clearRight = 0; // reset clear right
      go(45); // move forward to avoid any contact with wall on right you are turning around
    }
    move(turnQ,movUnit); // execute movement 
    if (turnQ = corMem){ // if it was a correction function turn back almost to where it was facing to make it more stable whilst moving
      turn(-corMem/1.5);
    }
  }
}



void stop() // Stops all motors
{
  digitalWrite (inputPin1A, LOW);
  digitalWrite (inputPin2A, LOW);
  digitalWrite (inputPin3A, LOW);
  digitalWrite (inputPin4A, LOW);

  delay(200);
  //This delay is to ensure the rover has stabilised before continuing 
}

void go(int dist) // Decides which direction and how far the rover moves straight forwards and backwards
{
  int rev = 0; // if 1 the rover will reverse
  int forMod = 2800/190; // How long it takes to go 1mm
  if (dist<0){ // If given distance is negative the rover will move backwards by that amount
    rev = 1;
  }
  digitalWrite (inputPin1A, rev - 0);
  digitalWrite (inputPin2A, 1 - rev);
  digitalWrite (inputPin3A, 1 - rev);
  digitalWrite (inputPin4A, rev - 0);

  delay(abs(dist * forMod)); // makes it go as far as it needs

  stop();
}

void turnLeft(int a2) // Turns left by a2 degrees
{
 digitalWrite (inputPin1A, HIGH);
 digitalWrite (inputPin2A, LOW);
 digitalWrite (inputPin3A, HIGH);
 digitalWrite (inputPin4A, LOW);
  
 delay (a2);
   //time taken to turn "a2" degrees

 stop();
}

void turnRight(int a2) // Turns right by a2 degrees
{
 digitalWrite (inputPin1A, LOW);
 digitalWrite (inputPin2A, HIGH);
 digitalWrite (inputPin3A, LOW);
 digitalWrite (inputPin4A, HIGH);
  
 delay (a2);
   //time taken to turn "a2" degrees
 stop();
}



float scan() // measures distance using the Sonar
{
  float duration;
  float dis1;
  digitalWrite(trigPin, LOW); // does sonar things
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  duration = pulseIn(echoPin, HIGH); // measures the delay in micro seconds
  dis1 = (343.000*1000*0.000001)*(duration/2); // turns the delay into a distance in mm
  return dis1;
  // returns the measured distance to the thing that called it
} 

float check(int a) calls upon "scan()" to measure distance with the servo it is attached to being set to "a" degrees
{
  float x1;
  servo_12.write(180-a); // moves servo
  delay(200); //so the sonar is in place
  x1 =scan();
  return x1; // returns distance to thing that called it
}


void turn(int k){ // makes the Rover turn by "k" degrees
  int trnMod = 995/90; // how long it takes to turn one degree
  if (k>0){ // if number is positive turn right by that amount
    turnRight(k*trnMod);
  }
  if (k<0){ // if number is negative turn left by that amount
    turnLeft(-k*trnMod);
  }
  stop();
}

void move(int ang, int dist1){ // tell it how much to turn then how far to move in one function
  turn(ang);
  go(dist1);
}

bool creep(int dist1){ // this function is a left over from earlier code, please disregard
  bool tf = 0;
  int forMod = 2800/190;
  int distT = millis()+(dist1*forMod);
  servo_12.write(45);
  delay(500);
  digitalWrite (inputPin1A, 0);
  digitalWrite (inputPin2A, 1);
  digitalWrite (inputPin3A, 1);
  digitalWrite (inputPin4A, 0);
  while(millis()<distT){
    distance = scan();
    if (distance < 70){
      tf = 1;
      distT = 0;
    }
    delay(10);
  }
  stop();
  return tf;
}

bool moveC(int ang, int dist1){ // this function is left over from earlier code, please disregard
  turn(ang);
  return creep(dist1);
}
//clear refers to the max values expected for the flat wall
//clear2 refers to the max values expected for an angled wall
